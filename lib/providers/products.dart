import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shop_app/models/htttp_exception.dart';

import './product.dart';

class Products with ChangeNotifier {
  List<Product> _items = [
    // Product(
    //   id: 'p1',
    //   title: 'Red Shirt',
    //   description: 'A red shirt - it is pretty red!',
    //   price: 29.99,
    //   imageUrl:
    //       'https://cdn.pixabay.com/photo/2016/10/02/22/17/red-t-shirt-1710578_1280.jpg',
    // ),
    // Product(
    //   id: 'p2',
    //   title: 'Trousers',
    //   description: 'A nice pair of trousers.',
    //   price: 59.99,
    //   imageUrl:
    //       'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Trousers%2C_dress_%28AM_1960.022-8%29.jpg/512px-Trousers%2C_dress_%28AM_1960.022-8%29.jpg',
    // ),
    // Product(
    //   id: 'p3',
    //   title: 'Yellow Scarf',
    //   description: 'Warm and cozy - exactly what you need for the winter.',
    //   price: 19.99,
    //   imageUrl:
    //       'https://live.staticflickr.com/4043/4438260868_cc79b3369d_z.jpg',
    // ),
    // Product(
    //   id: 'p4',
    //   title: 'A Pan',
    //   description: 'Prepare any meal you want.',
    //   price: 49.99,
    //   imageUrl:
    //       'https://upload.wikimedia.org/wikipedia/commons/thumb/1/14/Cast-Iron-Pan.jpg/1024px-Cast-Iron-Pan.jpg',
    // ),
  ];
  final token;
  final _userId;

  Products(this.token,this._userId,this._items);

  List<Product> get items {
    return [..._items]; //vraÄ‡am kopiju liste, ne pointer na pravu listu !!!!
  }

  List<Product> get favoriteItems {
    return _items.where((product) => product.isFavorite == true).toList();
  }

  Product findById(String id) {
    return _items.firstWhere((prod) => prod.id == id);
  }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  Future<void> fetchAndSetProducts([bool toFilter = false]) async { 
    var _queryString = toFilter == false ? "" : 'orderBy="creatorId"&equalTo="$_userId"';
    var url =
        'https://flutter-learning-udemy-7c504.firebaseio.com/products.json?auth=$token&$_queryString';
    try {
      final response = await http.get(url);
      if (json.decode(response.body) == null)
        return Future
            .value(); //IN CASE NO PRODACT ARE ON SERVER, because forEach throw error if we try to do it on a null !
      var extractedData = json.decode(response.body) as Map<String, dynamic>;

      if (extractedData == null) return;

      url ='https://flutter-learning-udemy-7c504.firebaseio.com/userProducts/$_userId.json?auth=$token';

       final _favoriteResponse = await http.get(url);
      final _favoriteData = json.decode(_favoriteResponse.body);

      List<Product> _loadedProducts = [];

      

      extractedData.forEach((prodId, product) {
    
        _loadedProducts.add(
          Product(
            id: prodId,
            title: product['title'],
            description: product['description'],
            imageUrl: product['imageUrl'],
            price: product['price'],
            isFavorite: _favoriteData == null ? false : _favoriteData[prodId] ?? false,
            
          ),
        );
      });

      _items = _loadedProducts;
      notifyListeners();
    } catch (error) {
      print(error);
      throw (error);
    }
  }

  Future<void> addProduct(Product product) async {
    final url =
        'https://flutter-learning-udemy-7c504.firebaseio.com/products.json?auth=$token';
    try {
      final response = await http.post(
        url,
        body: json.encode(
          {
            'title': product.title,
            'description': product.description,
            'imageUrl': product.imageUrl,
            'price': product.price,
            'creatorId': _userId,
          },
        ),
      );

      Product newProduct = Product(
        title: product.title,
        price: product.price,
        imageUrl: product.imageUrl,
        description: product.description,
        id: json.decode(response.body)['name'],//id generated by server
      );
      _items.add(newProduct);
      notifyListeners();
    } catch (error) {
      print(error);
      throw error;
    }
    // print(json.decode(response.body));
  }

  Future<void> editProduct(String id, Product newProduct) async {
    final url =
        'https://flutter-learning-udemy-7c504.firebaseio.com/products/$id.json?auth=$token';
    await http.patch(url,
        body: json.encode({
          'title': newProduct.title,
          'description': newProduct.description,
          'price': newProduct.price,
          'imageUrl': newProduct.imageUrl,
        }));

    final productId = _items.indexWhere((product) => product.id == id);
    _items[productId] = newProduct;
    notifyListeners();
  }

  Future<void> removeProduct(String id) async {
    final url =
        'https://flutter-learning-udemy-7c504.firebaseio.com/products/$id.json?auth=$token';
    final _productIndex = _items.indexWhere((item) => item.id == id);
    var _deletingProduct = _items[_productIndex];

    items.removeWhere((item) => item.id == id);
    notifyListeners();
    var response = await http.delete(url);
    if (response.statusCode >= 400) {
      _deletingProduct = null;
      notifyListeners();
      throw HttpException("Deleting the item failed!");
    }
  }
}
